---
name: PerlSec Scanner
permissions:
  contents: read
  security-events: write

on:
  push:
    paths:
      - '**.pl'
      - 'lib/**'
      - 't/**'
      - 'bin/**'
      - 'Makefile.PL'
  pull_request:
    paths:
      - '**.pl'
      - 'lib/**'
      - 't/**'
      - 'bin/**'
      - 'Makefile.PL'

jobs:
  scan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        perl: ['5.36', '5.38']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Perl ${{ matrix.perl }}
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: ${{ matrix.perl }}

      - name: Install dependencies
        run: |
          cpanm --quiet --notest --installdeps .
          cpanm MetaCPAN::Client JSON::MaybeXS Test::More Test::DescribeMe

      - name: Run tests
        run: prove -l t/

      - name: Run PerlSec Scanner - SARIF
        run: |
          mkdir -p scan-out
          bin/perlsec-scan --input . --output scan-out/perlsec.sarif --format sarif

      - name: Run PerlSec Scanner - JSON
        run: perl bin/perlsec-scan --input lib --output findings.json --format json

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scan-out/perlsec.sarif

      - name: Upload PerlSec findings
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perlsec-findings
          path: findings.json  # or findings.html, etc.
          retention-days: 7    # optional, default is 90

      - name: Annotate PR with PerlSec findings
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const findings = JSON.parse(fs.readFileSync('findings.json', 'utf8'));

            const comments = findings
              .filter(f => f.file && f.line)
              .slice(0, 50)  // GitHub limits to ~50 comments per request
              .map(f => ({
                path: f.file,
                line: f.line,
                body: `üõ°Ô∏è **PerlSec**: [${f.severity}] ${f.message}`
              }));

            for (const comment of comments) {
              await github.rest.pulls.createReviewComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                commit_id: context.payload.pull_request.head.sha,
                path: comment.path,
                line: comment.line,
                side: 'RIGHT',
                body: comment.body
              });
            }

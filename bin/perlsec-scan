#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use File::Find;
use JSON;
use Cwd 'realpath';
use lib './lib';
use PatternCheck qw(check_static_patterns);
use RegexCheck   qw(check_regex_patterns);
use VersionCheck qw(check_module_versions load_allowed_versions);

my ($dir, $output, $format, $help, $verbose);
$dir    = '.';
$output = 'findings.json';
$format = 'json';
my $allowlist_file = 'allowed_modules.txt';
my $refresh_cache;

GetOptions(
	'allowlist|a=s' => \$allowlist_file,
	'input|i=s'   => \$dir,
	'output|o=s'  => \$output,
	'format|f=s'  => \$format,
	'refresh-cache' => \$refresh_cache,
	'verbose|v!'  => \$verbose,
	'help|h'      => \$help,
) or die 'Error in command-line arguments';

if ($help) {
	print "Usage: $0 --input <dir> --output <file> --format json|txt|html|sarif [--verbose]\n";
	exit 0;
}

$dir = realpath($dir) or die "Invalid input path: $dir\n";
$allowlist_file = realpath($allowlist_file);

my @suspect_lines;

find(sub {
    return unless /\.pl$/;
    my $file = $File::Find::name;
    print "[+] Scanning $file\n" if $verbose;

    open my $fh, '<', $file or do {
        warn "Can't open $file: $!";
        return;
    };

    my @lines = <$fh>;
    close $fh;

    my %allow = load_allowed_versions($allowlist_file);
    for my $i (0 .. $#lines) {
        check_static_patterns($lines[$i], $file, $i + 1, \@suspect_lines);
        check_regex_patterns($lines[$i], $file, $i + 1, \@suspect_lines);
        check_module_versions($lines[$i], $file, $i + 1, \@suspect_lines, \%allow, $refresh_cache);
    }

}, $dir);

# Group by type if available
my %grouped;
for my $entry (@suspect_lines) {
    my ($file, $line, $msg, $type, $severity) = @$entry;
    $type     ||= 'Uncategorized';
    $severity ||= 'Medium';
    push @{ $grouped{$type} }, [$file, $line, $msg, $severity];
}

# Output
if ($format eq 'txt') {
    open my $out, '>', $output or die "Can't write to $output: $!";
    for my $entry (@suspect_lines) {
        print $out "$entry->[0]:$entry->[1]: $entry->[2]\n";
    }
    close $out;
    print "TXT report saved to $output\n" if $verbose;

} elsif ($format eq 'json') {
    open my $out, '>', $output or die "Can't write to $output: $!";
    my @structured = map {
        { file => $_->[0], line => $_->[1], message => $_->[2], type => $_->[3] || 'Uncategorized' }
    } @suspect_lines;
    print $out encode_json(\@structured);
    close $out;
    print "JSON report saved to $output\n" if $verbose;

} elsif ($format eq 'sarif') {
    my $schema = 'https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json';
    my @results_sarif = map {
        {
            ruleId   => $_->[3] || 'perlsec',
            message  => { text => $_->[2] },
            locations => [{
                physicalLocation => {
                    artifactLocation => {
                        uri       => $_->[0],
                        uriBaseId => '%SRCROOT%',
                    },
                    region => { startLine => $_->[1] }
                }
            }]
        }
    } @suspect_lines;

    my %sarif = (
        version  => '2.1.0',
        '$schema' => $schema,
        runs     => [{
            tool => {
                driver => {
                    name           => 'PerlSec Scanner',
                    informationUri => 'https://github.com/your-username/perlsec-scanner',
			rules => [ map { { id => $_, name => $_ } } keys %grouped ]
                }
            },
            results => \@results_sarif,
        }]
    );

    open my $out, '>', $output or die "Can't write to $output: $!";
    print $out encode_json(\%sarif);
    close $out;
    print "SARIF report saved to $output\n" if $verbose;

} elsif ($format eq 'html') {
my %severity_order = ( High => 1, Medium => 2, Low => 3 );

    open my $out, '>', $output or die "Can't write to $output: $!";

    my $summary = join '', map {
        "<tr><td>$_</td><td>" . scalar @{ $grouped{$_} } . "</td></tr>"
    } sort keys %grouped;

    my $tables = join '', map {
        my $type = $_;
my $rows = join '', map {
    my ($f, $l, $m, $s) = @$_;
    my $class = lc($s || 'Medium');
    "<tr class=\"$class\"><td>$f</td><td>$l</td><td>$m</td><td>$s</td></tr>"
} sort {
    ($severity_order{$a->[3] || 'Medium'} <=> $severity_order{$b->[3] || 'Medium'})
    ||
    ($a->[0] cmp $b->[0])  # Then sort by filename
    ||
    ($a->[1] <=> $b->[1])  # Then by line number
} @{ $grouped{$type} };
	
        "<h2>$type</h2><table><thead><tr><th>File</th><th>Line</th><th>Message</th><th>Severity</th></tr></thead><tbody>$rows</tbody></table>"
    } sort keys %grouped;

    my @files = sort keys %{{ map { $_->[0] => 1 } @suspect_lines }};
    my @types = sort keys %grouped;

    my $chart_data = join ",\n", map {
        my $t = $_;
        my $counts = join ',', map {
            my $f = $_;
            scalar grep { $_->[0] eq $f && ($_->[3] || 'Uncategorized') eq $t } @suspect_lines
        } @files;
        my $color = sprintf "#%06x", int(rand(0xFFFFFF));
        "{label: \"$t\", backgroundColor: \"$color\", data: [$counts]}"
    } @types;

    my $file_labels = join ',', map { "\"$_\"" } @files;

    print $out <<"HTML";
<!DOCTYPE html>
<html><head>
  <meta charset="UTF-8">
  <title>PerlSec Report</title>
  <style>
    body { font-family: sans-serif; }
    h1 { margin-top: 0 }
    table { border-collapse: collapse; width: 100%; margin-bottom: 1em; }
    th, td { border: 1px solid #ccc; padding: 6px; text-align: left; }
    th { background: #eee; }
.low     { background-color: #e0f7e0; }  /* greenish */
.medium  { background-color: #fff8e1; }  /* yellowish */
.high    { background-color: #fce4ec; }  /* reddish */
  </style>
</head><body>
<h1>PerlSec Scan Report</h1>
<h2>Summary</h2>
<table><thead><tr><th>Type</th><th>Count</th></tr></thead><tbody>
$summary
</tbody></table>

<div style="max-height: 400px;">
  <canvas id="chart"></canvas>
</div>

<div><strong>Severity legend:</strong>
  <span style="background-color:#fce4ec; padding:2px 6px;">High</span>
  <span style="background-color:#fff8e1; padding:2px 6px;">Medium</span>
  <span style="background-color:#e0f7e0; padding:2px 6px;">Low</span>
</div>

$tables

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
const ctx = document.getElementById('chart').getContext('2d');
new Chart(ctx, {
  type: 'bar',
  data: {
    labels: [$file_labels],
    datasets: [
      $chart_data
    ]
  },
options: {
  responsive: true,
  // maintainAspectRatio: false,
  plugins: {
    title: {
      display: true,
      text: 'Findings by File and Type'
    }
  },
  scales: {
    x: { stacked: true },
    y: { stacked: true, beginAtZero: true }
  }
}

});
</script>
</body></html>
HTML

    close $out;
    print "HTML report saved to $output\n" if $verbose;

} else {
    die "Unknown format: $format\n";
}
